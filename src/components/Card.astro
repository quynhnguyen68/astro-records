---
type Props = {
  id: string
  name: string
  artist: string
  image_url: string
}

const { id, name, artist, image_url } = Astro.props
---
<div class="card-container">
  <a href={`/${id}`} class="text-black hover:text-pink-700 focus-visible:ring-2 focus:outline-none focus:ring-black">
    <div
      class="card-item shadow-md hover:shadow-lg relative"
      transition:name={`record-${id}`}
    >
      <img
        draggable="false"
        class="card-image rounded-md relative z-10"
        src={image_url}
        alt={`${artist} - ${name} album cover`}
        aria-hidden="true"
        width="400"
        height="400"
      />
    </div>
  </a>
</div>

<style>
.card-item {
  /* Make the 3D stuff workâ€¦ */
  perspective: 40em;
}
.card-image {
		/* Link an animation to the established view-timeline (of the parent li) and have it run during the contain phase */
		animation: linear rotate-cover both;
		animation-duration: auto;
		animation-timeline: --li-in-and-out-of-view;
		animation-range: contain 0% contain 100%;

		/* Prevent FOUC */
		transform: translateX(-100%) rotateY(-45deg);

		will-change: transform;
	}

  .card-image {
		dislay: block;
		width: 15rem;
		height: 15rem;

		-webkit-box-reflect: below 0.5em
			linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.25));
	}

  	/* Animation that rotates the cover */
	@keyframes rotate-cover {
		0% {
			transform: translateX(-100%) rotateY(-45deg);
		}
		35% {
			transform: translateX(0) rotateY(-45deg);
		}
		50% {
			transform: rotateY(0deg) translateZ(1em) scale(1.5);
		}
		65% {
			transform: translateX(0) rotateY(45deg);
		}
		100% {
			transform: translateX(100%) rotateY(45deg);
		}
	}
</style>